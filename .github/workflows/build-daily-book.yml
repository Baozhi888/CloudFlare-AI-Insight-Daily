name: Build Daily Journal

on:
  # 每天UTC时间8点自动触发 (对应北京时间下午4点)
  # 如果需要北京时间早上8点，请设置为 0 0 * * *
  schedule:
    # 这里的 cron 表示每5分钟执行一次，用于测试。
    # 如果要实现 “每天UTC时间8点” ，应改为 '0 8 * * *'
    - cron: 0 0 * * *
    
  # 手动触发
  workflow_dispatch:
  
jobs:
  build-book:
    runs-on: ubuntu-latest

    env:
      IMAGE_PROXY_URL: ${{ vars.IMAGE_PROXY_URL }} # 从仓库变量中读取
      
    # 需要写入权限来提交生成的文件
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 明确指定要检出的分支
          ref: 'book' # <-- (3) 请将 'main' 替换为你的目标分支名
          
      - name: Install mdBook
        run: |
          mkdir -p $HOME/.cargo/bin
          export PATH=$HOME/.cargo/bin:$PATH
          curl -sL https://github.com/rust-lang/mdBook/releases/download/v0.4.51/mdbook-v0.4.51-x86_64-unknown-linux-gnu.tar.gz | tar -xz -C $HOME/.cargo/bin

      - name: Replace image URLs in daily notes
        run: |
          echo "开始替换 daily/ 目录下的 Markdown 文件内容..."
          echo "使用的代理前缀: ${{ env.IMAGE_PROXY_URL }}" # 在日志中打印变量以供调试
          # 使用 find 和 sed 高效地批量替换
          # -exec sed ... {} + 会将所有找到的文件传递给一个 sed 命令，效率更高
          # 使用 `|` 作为 sed 的分隔符，以避免与 URL 中的 `/`冲突
          find daily -type f -name "*.md" -exec sed -i \
            -e 's|upload.chinaz.com|pic.chinaz.com|g' \
            -e 's|https://pic.chinaz.com|${{ env.IMAGE_PROXY_URL }}https://pic.chinaz.com|g' {} +
          echo "URL 替换完成。"

      - name: Generate SUMMARY.md
        id: generate_summary
        run: |
          # 确保 src 目录存在
          mkdir -p src
          # 复制daily到目标目录
          cp -r daily/ src/
          # 定义 SUMMARY.md 的路径
          SUMMARY_FILE="src/SUMMARY.md"
          
          # 查找最新的日刊文件
          LATEST_DAILY_FILE=$(ls -1 daily/*.md | sort -r | head -n 1)

          if [ -z "$LATEST_DAILY_FILE" ]; then
            echo "错误：在 'daily' 目录中没有找到任何 .md 文件。"
            exit 1
          fi

          # 获取最新日刊的文件名，例如 2025-06-12.md
          LATEST_FILENAME=$(basename "$LATEST_DAILY_FILE")

          # 将最新的日刊复制到 src 目录，作为 "Today" 页面
          cp "$LATEST_DAILY_FILE" "src/$LATEST_FILENAME"

          # 开始写入 SUMMARY.md
          echo "# Summary" > "$SUMMARY_FILE"
          echo "" >> "$SUMMARY_FILE"
          echo "[Today]($LATEST_FILENAME)" >> "$SUMMARY_FILE"
          echo "" >> "$SUMMARY_FILE"

          # --- 生成按月分组的列表 ---
          current_month=""
          # 反向排序文件列表，实现日期从新到旧
          for file in $(ls -1 daily/*.md | sort -r); do
            # 从文件名 'daily/YYYY-MM-DD.md' 中提取月份 'YYYY-MM'
            month=$(echo "$file" | cut -d'/' -f2 | cut -d'-' -f1,2)
            
            # 如果是新的月份，则添加一个月份标题
            if [ "$month" != "$current_month" ]; then
              echo "# $month" >> "$SUMMARY_FILE"
              current_month=$month
            fi

            # 提取链接标题 'MM-DD'
            link_title=$(echo "$file" | cut -d'/' -f2 | cut -d'.' -f1 | cut -d'-' -f2,3)
            
            # 写入日刊条目
            echo "- [${link_title}-日刊]($file)" >> "$SUMMARY_FILE"
          done
          
          echo "SUMMARY.md 已成功生成。"
          cat "$SUMMARY_FILE" # 在日志中打印生成的内容以供调试

      - name: Build the book
        run: |
          mdbook build

      - name: Organize output files
        run: |
          # 清理旧的 today 目录（如果存在），以防万一
          rm -rf today
          # 创建 today 目录并将构建产物移入
          mkdir -p today
          mv book today/

      - name: Add Clarity tracking to book.js
        run: |
          TOC_FILE="today/book/book.js"
          FORWARD_CODE='${{ vars.FORWARD_CODE }}'
          CLARITY_CODE='${{ vars.CLARITY_CODE }}'

          if [ -f "$TOC_FILE" ]; then
            echo "Appending Forward tracking code to $TOC_FILE"
            # Add a newline first
            echo "" >> "$TOC_FILE"
            # Append the Forward script
            echo "$FORWARD_CODE" >> "$TOC_FILE"
            echo "Forward code appended."
            
            echo "Appending Clarity tracking code to $TOC_FILE"
            # Add a newline first
            echo "" >> "$TOC_FILE"
            # Append the Clarity script
            echo "$CLARITY_CODE" >> "$TOC_FILE"
            echo "Clarity code appended."
            # tail -1000 "$TOC_FILE"
          else
            echo "Warning: $TOC_FILE not found. Skipping Clarity code injection."
            # Depending on your needs, you might want to fail the build if toc.js is essential
            # and not found, e.g., by uncommenting the next line:
            # exit 1
          fi

      - name: Download RSS Feed
        run: |
          if [ -z "${{ vars.RSS_FEED_URL }}" ]; then
            echo "警告: RSS_FEED_URL 仓库变量未设置或为空。"
            echo "跳过下载 RSS Feed。如果需要 rss.xml 文件，请创建一个空的。"
            # touch rss.xml # 可选：创建一个空的 rss.xml 以避免后续 git add 警告 (如果它不存在)
                        # 如果 rss.xml 是可选的，并且不存在时不想创建空文件，则移除此行
                        # 并在 git add 中使用 `git add --ignore-missing rss.xml` 或类似方法
          else
            echo "正在从 ${{ vars.RSS_FEED_URL }} 下载 RSS Feed..."
            # 使用 -q (quiet) 来减少 wget 输出，使用 --show-progress 在必要时显示进度
            # 使用 --timeout 和 --tries 增加健壮性
            if wget -O rss.xml "${{ vars.RSS_FEED_URL }}" --timeout=30 --tries=3; then
              echo "RSS Feed 已成功下载到 rss.xml"
            else
              echo "错误: 下载 RSS Feed 失败。wget 返回错误码 $?。"
              # echo "创建一个空的 rss.xml 以允许流程继续。" # 可选：如果下载失败也想继续
              # touch rss.xml
              # exit 1 # 如果下载失败是关键错误，则取消注释此行以使工作流失败
            fi
          fi
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加所有新生成或修改的文件
          # 包括 src/SUMMARY.md, src/YYYY-MM-DD.md 和 today/book/ 目录
          git add src/SUMMARY.md today/book
          if [ -f "rss.xml" ]; then
            git add rss.xml
          else
            echo "rss.xml 未找到，不添加到提交中。"
          fi

          # 检查是否有文件变更
          if git diff --staged --quiet; then
            echo "没有文件变更，无需提交。"
          else
            echo "检测到文件变更，正在提交..."
            git commit -m "docs: 自动构建日刊书籍 (`date -u`)"
            git push
          fi
